<코드 챌린지 목록>
1. UX를 위한 네비게이션 바 구현 - 완료
- 홈 버튼 : Link pathname 활용
- 뒤로가기 : 상대경로 때문에 현재 경로를 params로 받는 방식 생각했으나, navigate(-1) 통해서 해결
2. 차트 타임스탬프를 원하는 형태로 변환 후 리턴해보기 - 완료
- 그래프에서 데이터 리턴 타입을 설정해서 해결
3. 캔들차트 만들어보기
- 기본 linechart로 시작 / 차트 타입 선택할 수 있도록 UI 추가
- useState 활용해서 linechart or candlechart 분기 설정 후 조건부 렌더링으로 구현
4. price 컴포넌트 활성화
- 카드뷰처럼 완성

<공부한 내용 정리>
1. reactQuery 
1-1 초기 설정(main.tsx)
- import { QueryClient, QueryClientProvider } from "react-query";
- const queryClient = new QueryClient();
- <QueryClientProvider client={queryClient}>

** react-query는 API로 호출한 데이터를 캐시로 갖고 있는데 이를 reactquerydevtool 컴포넌트로 확인 가능함
렌더링 하고 싶은 곳(나같은 경우엔 app.tsx에서 확인하려고 제일 하단에 컴포넌트 호출함)

1-2 사용 방법
const {isLoading, data} = usequery("구분하기 위한 쿼리의 고유 ID값 / 사용자가 지정함", fetch 함수)
(reactquery가 객체를 리턴하는데 2개 이상의 reactquery를 다룰 때 이름 변경하는 부분 등 고려해서 객체 구조 할당으로 코딩 시작함)
(호출 함수는 api.ts에 export 형식으로 작성 후 호출하도록해서 api 호출과 컴포넌트를 분리함)

<코드 예시>
export async function fetchCoins() {
  const res = await fetch(`${BASE_URL}/coins`);
  const json = await res.json();

  return (json as ICoin[]).slice(0, 100);
}

1-3 데이터 시각화 (apexchart.js)
doc 참고해서 옵션 부여

1-4 react helmet 사용
타이틀 수정하는데 사용 << 지금까진 딱히 쓸모없어서 안건들듯


** 참고 URL
CoinGecko API : https://docs.coingecko.com/v3.0.1/reference/search-data // 파라미터 등 참고용(demo 전용용)
apexchart 옵션 정보 : https://apexcharts.com/docs/